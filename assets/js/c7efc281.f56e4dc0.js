"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7122],{4898:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var r=a(4848),t=a(8453);const s={sidebar_position:1},l="Variables",i={id:"variables/variables",title:"Variables",description:"Val and Var",source:"@site/docs/variables/variables.md",sourceDirName:"variables",slug:"/variables/",permalink:"/kotlinworld/docs/variables/",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/variables/variables.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\ud83e\uddee Basic",permalink:"/kotlinworld/docs/category/-basic"},next:{title:"Arithmetic Operators",permalink:"/kotlinworld/docs/variables/aritmetic-operators"}},o={},d=[{value:"Val and Var",id:"val-and-var",level:3},{value:"Number Type",id:"number-type",level:3},{value:"Unsigned value:",id:"unsigned-value",level:3},{value:"Boolean Types",id:"boolean-types",level:3},{value:"Char Type",id:"char-type",level:3},{value:"Strings",id:"strings",level:3}];function u(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"variables",children:"Variables"})}),"\n",(0,r.jsx)(n.h3,{id:"val-and-var",children:"Val and Var"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"fun main() {\n\n    // Variables\n    var conter01: Int = 1\n    // By this way I set the type\n    var counter2 = 10\n    // Type inference(Kotlin can understand what is the type of the variable)\n    // It is better to type the type I think\n    val counter3 = 10\n    // val does not accept reasignment (it is like a constant)\n    // Tip: Always try to use val instead of var\n\n    // ------------------- //\n\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"number-type",children:"Number Type"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"\n    // Byte, Short, Int and Long\n    val number1: Int = 20\n\n    val number2: Long = 30 \n    // I need to add 'L' into the end\n\n    val number3 = 20\n\n    // Number type (Decimal)\n\n    // Float and Double\n    val number4: Double = 200.0\n    number4.plus(2)\n    val number5 = 5f // I need to add 'f' int the end\n\n    // Number Type Conversions\n    val number6 = 10\n    val number7ToDouble = number6.toLong()\n\n    val number8ToLong = number6.toLong();\n    println(number8ToLong)\n    // Ineed to be careful about these convertions\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"unsigned-value",children:"Unsigned value:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"    // Unsigned types: Only positive values\n    val unsignedValue01: UByte = 8u\n    val unsignedValue02: UInt = 10u\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"boolean-types",children:"Boolean Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"    val trueValue: Boolean = true\n    val falseValue = false // Inference\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"char-type",children:"Char Type"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"    val a: Char = 'A'\n    val b = 'B'\n    // There is an ASC table, check it:\n    println(\"Code: \" + b.code)\n    // Char gives us a lot of opportunitites (because of ASC table)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"strings",children:"Strings"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'    val s1 = "abc"\n    val s2 = "def"\n    val newString = s1 + s2\n    println(newString)\n\n    // ---------------------- //\n\n    // String template\n    val s3 = "Soma $s1$s2" // A new way of contact string\n    println(s3)\n\n    val s4 = "Soma: \'$s1$s2\'. O tamnho \xe9: ${(s1 + s2).length}"\n\n    // ---------------------- //\n\n\n    // String Lietrals\n    /*\n    I want to have something like ths:\n\n    O rato roeu\n    a roupa do\n    rei de roma\n\n    */\n\n    // Solution:\n\n    val rato = """\n        O rato roeu\n            a roupa do\n                rei de roma\n    """.trimIndent() // TrimIndent makes all of them aligned\n\n\n    val rato2 = """\n        O rato roeu\n            a roupa do\n                rei de roma\n    """.trimMargin() // TrimMargin makes all of them aligned acording to how I want to\n\n\n    // Reading values from keyboard\n    print("Type your name: ")\n    val nameUser = readln()\n    println("Your inverted name is:  ${nameUser.reversed()}")\n    // It is prefered to use String template\n\n'})})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>l,x:()=>i});var r=a(6540);const t={},s=r.createContext(t);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);